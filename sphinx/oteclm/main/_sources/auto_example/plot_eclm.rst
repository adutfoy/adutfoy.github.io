
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_eclm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_plot_eclm.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_eclm.py:


==============================
Extended Common Load Modelling
==============================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Import the required modules

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: default

    import openturns as ot
    from openturns.viewer import View
    import oteclm








.. GENERATED FROM PYTHON SOURCE LINES 15-25

Description
===========

We consider a common cause failure (CCF) groupe with *n=7* identical and independent components. The total impact vector of this CCF group is estimated after N=1002100 demands or tests on the group.

.. math::

    V_t^{n,N} = [1000000, 2000, 200, 30, 20, 5, 0, 0]



.. GENERATED FROM PYTHON SOURCE LINES 27-38

.. code-block:: default

    n = 7
    vectImpactTotal = ot.Indices(n+1)
    vectImpactTotal[0] = 1000000
    vectImpactTotal[1] = 2000
    vectImpactTotal[2] = 200
    vectImpactTotal[3] = 30
    vectImpactTotal[4] = 20
    vectImpactTotal[5] = 5
    vectImpactTotal[6] = 0
    vectImpactTotal[7] = 0








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Create the ECLM class. We will use the Gauss Legendre quadrature algorithm to compute all the integrals of the ECLM model. The use of 50 points is sufficicient to reach a good precision.

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: default

    myECLM = oteclm.ECLM(vectImpactTotal, ot.GaussLegendre([50]))








.. GENERATED FROM PYTHON SOURCE LINES 45-52

Estimate the optimal parameter
==============================

We use the Mankamo assumption. We use the maximum likelihood estimators of the *Mankamo parameter*. We want to get all the graphs of the likelihood function at the optimal Mankamo parameter.

We start by verifying that our starting point :math:`(P_x, C_{co}, c_x)` for the optimization algorithm verifies the constraints!


.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default

    startingPoint = [5.0e-3, 0.51, 0.85]
    print(myECLM.verifyMankamoConstraints(startingPoint))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    False




.. GENERATED FROM PYTHON SOURCE LINES 58-59

If the point is not valid, we can ask for a valid one by giving $C_x$.

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: default


    startingPoint = myECLM.computeValidMankamoStartingPoint(0.7)
    startingPoint






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0.00018494,0.35,0.7]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 64-65

Anyway, if the starting point is not valid, the function *estimateMaxLikelihoodFromMankamo* will automatically change it by itself.

.. GENERATED FROM PYTHON SOURCE LINES 67-73

.. code-block:: default

    visuLikelihood = True
    mankamoParam, generalParam, finalLogLikValue, graphesCol = myECLM.estimateMaxLikelihoodFromMankamo(startingPoint, visuLikelihood)
    print('Mankamo parameter : ', mankamoParam)
    print('general parameter : ', generalParam)
    print('finalLogLikValue : ', finalLogLikValue)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Production of graphs
    graph (Cco, Cx) = (Cco_optim, Cx_optim)
    graph (logPx, Cx) = (logPx_optim, Cx_optim)
    graph (logPx, Cco) = (logPx_optim, Cco_optim)
    graph Cx = Cx_optim
    graph Cco = Cco_optim
    graph logPx = logPx_optim
    Mankamo parameter :  [0.00036988020585009376, 0.00013170558130323772, 0.2859592315814119, 0.28595923158141184]
    general parameter :  [0.9993383385136969, 0.15306875658191693, 0.15306875658191693, 0.2418777934025751, 0.7581222065974249]
    finalLogLikValue :  -709.782712893384




.. GENERATED FROM PYTHON SOURCE LINES 74-80

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for i in range(6):
        gl.setGraph(i//3, i%3, graphesCol[i])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_001.png
   :alt: , Log likelihood at $(\log P_{x}, C_{co}) = ($-8.93E+00,2.86E-01), Log likelihood at $(\log P_{x}, C_{x}) = ($-8.93E+00,2.86E-01), Log likelihood at $(C_{co}, C_{x}) = ($2.86E-01,2.86E-01), Log likelihood at $C_{x} = $2.86E-01, Log likelihood at $C_{co} = $2.86E-01, Log likelihood at $\log P_{x} = $-8.93E+00
   :srcset: /auto_example/images/sphx_glr_plot_eclm_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/test/lib/python3.11/site-packages/openturns/viewer.py:517: UserWarning: No contour levels were found within the data range.
      contourset = self._ax[0].contour(X, Y, Z, **contour_kw)




.. GENERATED FROM PYTHON SOURCE LINES 81-83

Compute the ECLM probabilities
==============================

.. GENERATED FROM PYTHON SOURCE LINES 85-100

.. code-block:: default

    PEG_list = myECLM.computePEGall()
    print('PEG_list = ', PEG_list)
    print('')

    PSG_list = myECLM.computePSGall()
    print('PSG_list = ', PSG_list)
    print('')

    PES_list = myECLM.computePESall()
    print('PES_list = ', PES_list)
    print('')

    PTS_list = myECLM.computePTSall()
    print('PTS_list = ', PTS_list)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PEG_list =  [0.9979969028067912, 0.00024430917858305466, 6.849724937574918e-06, 1.925258340500105e-06, 1.166839778347915e-06, 1.1409356799804327e-06, 1.7626642205717672e-06, 4.5669864345680374e-06]

    PSG_list =  [0.9999999999999799, 0.0003698802058500994, 5.293407876078579e-05, 2.5055874850629467e-05, 1.4444625914572557e-05, 9.233250555692003e-06, 6.329650655139803e-06, 4.5669864345680374e-06]

    PES_list =  [0.9979969028067912, 0.0017101642500813826, 0.00014384422368907327, 6.738404191750367e-05, 4.0839392242177025e-05, 2.3959649279589087e-05, 1.233864954400237e-05, 4.5669864345680374e-06]

    PTS_list =  [0.9999999999999796, 0.0020030971931882958, 0.00029293294310691345, 0.0001490887194178402, 8.170467750033652e-05, 4.08652852581595e-05, 1.6905635978570407e-05, 4.5669864345680374e-06]




.. GENERATED FROM PYTHON SOURCE LINES 101-110

Generate a sample of the parameters by Bootstrap
================================================

We use the bootstrap sampling to get a sample of total impact vectors. Each total impact vector value is associated to an optimal Mankamo parameter and an optimal general parameter.
We fix the size of the bootstrap sample.
We also fix the number of realisations after which the sample is saved.
Each optimisation problem is initalised with the optimal parameter found for the total impact vector.

The sample is generated and saved in a csv file.

.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. code-block:: default

    Nbootstrap = 100








.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: default

    startingPoint = mankamoParam[1:4]
    fileNameSampleParam = 'sampleParamFromMankamo_{}.csv'.format(Nbootstrap)
    myECLM.estimateBootstrapParamSampleFromMankamo(Nbootstrap, startingPoint, fileNameSampleParam)

    # Create the sample of all the ECLM probabilities associated to the sample of the parameters.








.. GENERATED FROM PYTHON SOURCE LINES 122-125

.. code-block:: default

    fileNameECLMProbabilities = 'sampleECLMProbabilitiesFromMankamo_{}.csv'.format(Nbootstrap)
    myECLM.computeECLMProbabilitiesFromMankano(fileNameSampleParam, fileNameECLMProbabilities)








.. GENERATED FROM PYTHON SOURCE LINES 126-130

Graphically analyse the bootstrap sample of parameters
======================================================

We create the Pairs graphs of the Mankamo and general parameters.

.. GENERATED FROM PYTHON SOURCE LINES 132-134

.. code-block:: default

    graphPairsMankamoParam, graphPairsGeneralParam, graphMarg_list, descParam = myECLM.analyseGraphsECLMParam(fileNameSampleParam)








.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    view = View(graphPairsMankamoParam)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_002.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 139-144

.. code-block:: default

    view = View(graphPairsGeneralParam)
    view.show()

    # We estimate the distribution of each parameter with a Histogram and a normal kernel smoothing.




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_003.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-151

.. code-block:: default

    gl = ot.GridLayout(3,3)
    for k in range(len(graphMarg_list)):
        gl.setGraph(k//3, k%3, graphMarg_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_004.png
   :alt: , Pt PDF, Px PDF, Cco PDF, Cx PDF, pi PDF, db PDF, dx PDF, dR PDF, yxm PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 152-156

Graphically analyse the bootstrap sample of the ECLM probabilities
==================================================================

We create the Pairs graphs of all the ECLM probabilities. We limit the graphical study to the multiplicities lesser than :math:`k_{max}`.

.. GENERATED FROM PYTHON SOURCE LINES 158-162

.. code-block:: default

    kMax = 5

    graphPairs_list, graphPEG_PES_PTS_list, graphMargPEG_list, graphMargPSG_list, graphMargPES_list, graphMargPTS_list, desc_list = myECLM.analyseGraphsECLMProbabilities(fileNameECLMProbabilities, kMax)








.. GENERATED FROM PYTHON SOURCE LINES 163-170

.. code-block:: default

    descPairs = desc_list[0]
    descPEG_PES_PTS = desc_list[1]
    descMargPEG = desc_list[2]
    descMargPSG = desc_list[3]
    descMargPES = desc_list[4]
    descMargPTS = desc_list[5]








.. GENERATED FROM PYTHON SOURCE LINES 171-174

.. code-block:: default

    view = View(graphPairs_list[0])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_005.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 175-178

.. code-block:: default

    view = View(graphPairs_list[1])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_006.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 179-182

.. code-block:: default

    view = View(graphPairs_list[2])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_007.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 183-186

.. code-block:: default

    view = View(graphPairs_list[3])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_008.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 187-188

Fix a k <=kMax

.. GENERATED FROM PYTHON SOURCE LINES 188-193

.. code-block:: default


    k = 0
    view = View(graphPEG_PES_PTS_list[k])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_009.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 194-201

.. code-block:: default

    len(graphMargPEG_list)
    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPEG_list)):
        gl.setGraph(k//3, k%3, graphMargPEG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_010.png
   :alt: , PEG(0|7) PDF, PEG(1|7) PDF, PEG(2|7) PDF, PEG(3|7) PDF, PEG(4|7) PDF, PEG(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 202-208

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPSG_list)):
        gl.setGraph(k//3, k%3, graphMargPSG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_011.png
   :alt: , PSG(0) PDF, PSG(1) PDF, PSG(2) PDF, PSG(3) PDF, PSG(4) PDF, PSG(5) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 209-215

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPES_list)):
        gl.setGraph(k//3, k%3, graphMargPES_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_012.png
   :alt: , PES(0|7) PDF, PES(1|7) PDF, PES(2|7) PDF, PES(3|7) PDF, PES(4|7) PDF, PES(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 216-222

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPTS_list)):
        gl.setGraph(k//3, k%3, graphMargPTS_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_013.png
   :alt: , PTS(0|7) PDF, PTS(1|7) PDF, PTS(2|7) PDF, PTS(3|7) PDF, PTS(4|7) PDF, PTS(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 223-228

Fit a distribution to the ECLM probabilities
============================================

We fit a distribution among a given list to each ECLM probability. We test it with the Lilliefors test. 
We also compute the confidence interval of the specified level.

.. GENERATED FROM PYTHON SOURCE LINES 230-238

.. code-block:: default

    factoryColl = [ot.BetaFactory(), ot.LogNormalFactory(), ot.GammaFactory()]
    confidenceLevel = 0.9
    IC_list, graphMarg_list, descMarg_list = myECLM.analyseDistECLMProbabilities(fileNameECLMProbabilities, kMax, confidenceLevel, factoryColl)

    IC_PEG_list, IC_PSG_list, IC_PES_list, IC_PTS_list = IC_list
    graphMargPEG_list, graphMargPSG_list, graphMargPES_list, graphMargPTS_list = graphMarg_list
    descMargPEG, descMargPSG, descMargPES, descMargPTS = descMarg_list





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Test de Lilliefors
    ==================

    Ordre k= 0
    PEG...
    Best model PEG( 0 |n) :  LogNormal(muLog = 1.72957, sigmaLog = 1.44783e-05, gamma = -4.64037) p-value =  0.0979020979020979
    PSG...
    Best model PSG( 0 |n) :  LogNormal(muLog = -27.6303, sigmaLog = 0.000218814, gamma = 1) p-value =  0.5531742822482815
    PES...
    Best model PES( 0 |n) :  Gamma(k = 15023.3, lambda = 1.49397e+06, gamma = 0.987805) p-value =  0.13005272407732874
    PTS...
    Best model PTS( 0 |n) :  LogNormal(muLog = -26.9863, sigmaLog = 0.000121641, gamma = 1) p-value =  0.34506197520991605

    Test de Lilliefors
    ==================

    Ordre k= 1
    PEG...
    Best model PEG( 1 |n) :  LogNormal(muLog = -9.30003, sigmaLog = 0.15745, gamma = 0.000175179) p-value =  0.868103448275862
    PSG...
    Best model PSG( 1 |n) :  Beta(alpha = 2.0922, beta = 2.36032, a = 0.000351093, b = 0.000392658) p-value =  0.648896293211162
    PES...
    Best model PES( 1 |n) :  LogNormal(muLog = -7.35412, sigmaLog = 0.15745, gamma = 0.00122626) p-value =  0.865625
    PTS...
    Best model PTS( 1 |n) :  LogNormal(muLog = -7.67793, sigmaLog = 0.172933, gamma = 0.00166948) p-value =  0.20161290322580644

    Test de Lilliefors
    ==================

    Ordre k= 2
    PEG...
    Best model PEG( 2 |n) :  LogNormal(muLog = -10.5099, sigmaLog = 0.0247712, gamma = -2.02828e-05) p-value =  0.1755153029356652
    PSG...
    Best model PSG( 2 |n) :  Beta(alpha = 1.94997, beta = 1.9295, a = 1.79475e-05, b = 5.2853e-05) p-value =  0.16333333333333333
    PES...
    Best model PES( 2 |n) :  LogNormal(muLog = -7.46541, sigmaLog = 0.0247712, gamma = -0.00042594) p-value =  0.17051842598376016
    PTS...
    Best model PTS( 2 |n) :  LogNormal(muLog = 1.91414, sigmaLog = 4.60072e-06, gamma = -6.78081) p-value =  0.19175515302935664

    Test de Lilliefors
    ==================

    Ordre k= 3
    PEG...
    Best model PEG( 3 |n) :  LogNormal(muLog = -10.9482, sigmaLog = 0.0144161, gamma = -1.55974e-05) p-value =  0.24429460580912862
    PSG...
    Best model PSG( 3 |n) :  Beta(alpha = 1.96789, beta = 2.67636, a = 3.0368e-06, b = 2.46881e-05) p-value =  0.81
    PES...
    Best model PES( 3 |n) :  LogNormal(muLog = -7.39285, sigmaLog = 0.0144161, gamma = -0.000545907) p-value =  0.23688569850911098
    PTS...
    Best model PTS( 3 |n) :  Beta(alpha = 2.08725, beta = 1.61163, a = 6.33341e-05, b = 0.000160945) p-value =  0.4076064489458454

    Test de Lilliefors
    ==================

    Ordre k= 4
    PEG...
    Best model PEG( 4 |n) :  Beta(alpha = 2.37851, beta = 1.51056, a = 2.99821e-07, b = 1.28032e-06) p-value =  0.1736414740787008
    PSG...
    Best model PSG( 4 |n) :  Beta(alpha = 1.68139, beta = 3.09722, a = 3.99687e-07, b = 1.40107e-05) p-value =  0.8113790970933829
    PES...
    Best model PES( 4 |n) :  Beta(alpha = 2.37851, beta = 1.51056, a = 1.04937e-05, b = 4.48113e-05) p-value =  0.1438965238480194
    PTS...
    Best model PTS( 4 |n) :  Beta(alpha = 2.19485, beta = 1.96585, a = 1.15122e-05, b = 8.18545e-05) p-value =  0.6165824915824916

    Test de Lilliefors
    ==================

    Ordre k= 5
    PEG...
    Best model PEG( 5 |n) :  Beta(alpha = 2.00772, beta = 2.06612, a = 5.03412e-08, b = 1.14186e-06) p-value =  0.916083916083916
    PSG...
    Best model PSG( 5 |n) :  Beta(alpha = 1.31999, beta = 3.25439, a = 2.70436e-09, b = 8.82364e-06) p-value =  0.9140859140859141
    PES...
    Best model PES( 5 |n) :  Beta(alpha = 2.00772, beta = 2.06612, a = 1.05716e-06, b = 2.39791e-05) p-value =  0.9200799200799201
    PTS...
    Best model PTS( 5 |n) :  Beta(alpha = 1.84893, beta = 2.64399, a = 9.87506e-07, b = 4.02314e-05) p-value =  0.8710138029509757





.. GENERATED FROM PYTHON SOURCE LINES 239-253

.. code-block:: default

    for k in range(len(IC_PEG_list)):
        print('IC_PEG_', k, ' = ', IC_PEG_list[k])

    for k in range(len(IC_PSG_list)):
        print('IC_PSG_', k, ' = ', IC_PSG_list[k])

    for k in range(len(IC_PES_list)):
        print('IC_PES_', k, ' = ', IC_PES_list[k])

    for k in range(len(IC_PTS_list)):
        print('IC_PTS_', k, ' = ', IC_PTS_list[k])

    # We draw all the estimated distributions and the title gives the best model.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    IC_PEG_ 0  =  [0.997709, 0.997996]
    IC_PEG_ 1  =  [0.000242827, 0.000295554]
    IC_PEG_ 2  =  [5.80494e-06, 8.26078e-06]
    IC_PEG_ 3  =  [1.56847e-06, 2.463e-06]
    IC_PEG_ 4  =  [5.01127e-07, 1.2131e-06]
    IC_PEG_ 5  =  [1.57426e-07, 1.00529e-06]
    IC_PSG_ 0  =  [1, 1]
    IC_PSG_ 1  =  [0.000354533, 0.000386447]
    IC_PSG_ 2  =  [2.16182e-05, 4.85748e-05]
    IC_PSG_ 3  =  [4.77323e-06, 1.98903e-05]
    IC_PSG_ 4  =  [1.04711e-06, 1.00707e-05]
    IC_PSG_ 5  =  [2.94417e-07, 5.67998e-06]
    IC_PES_ 0  =  [0.997709, 0.997996]
    IC_PES_ 1  =  [0.00169979, 0.00206888]
    IC_PES_ 2  =  [0.000121904, 0.000173476]
    IC_PES_ 3  =  [5.48967e-05, 8.62049e-05]
    IC_PES_ 4  =  [1.75401e-05, 4.24574e-05]
    IC_PES_ 5  =  [3.30636e-06, 2.11104e-05]
    IC_PTS_ 0  =  [1, 1]
    IC_PTS_ 1  =  [0.00200361, 0.00229086]
    IC_PTS_ 2  =  [0.000209886, 0.000318829]
    IC_PTS_ 3  =  [7.83573e-05, 0.000152162]
    IC_PTS_ 4  =  [2.02811e-05, 7.47002e-05]
    IC_PTS_ 5  =  [3.67077e-06, 3.16551e-05]




.. GENERATED FROM PYTHON SOURCE LINES 254-260

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPEG_list)):
        gl.setGraph(k//3, k%3, graphMargPEG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_014.png
   :alt: , PEG(0|7) - best model : LogNormal, PEG(1|7) - best model : LogNormal, PEG(2|7) - best model : LogNormal, PEG(3|7) - best model : LogNormal, PEG(4|7) - best model : Beta, PEG(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 261-267

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPSG_list)):
        gl.setGraph(k//3, k%3, graphMargPSG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_015.png
   :alt: , PSG(0|7) - best model : LogNormal, PSG(1|7) - best model : Beta, PSG(2|7) - best model : Beta, PSG(3|7) - best model : Beta, PSG(4|7) - best model : Beta, PSG(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_015.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 268-274

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPES_list)):
            gl.setGraph(k//3, k%3, graphMargPES_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_016.png
   :alt: , PES(0|7) - best model : Gamma, PES(1|7) - best model : LogNormal, PES(2|7) - best model : LogNormal, PES(3|7) - best model : LogNormal, PES(4|7) - best model : Beta, PES(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_016.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 275-281

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPTS_list)):
        gl.setGraph(k//3, k%3, graphMargPTS_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_017.png
   :alt: , PTS(0|7) - best model : LogNormal, PTS(1|7) - best model : LogNormal, PTS(2|7) - best model : LogNormal, PTS(3|7) - best model : Beta, PTS(4|7) - best model : Beta, PTS(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_017.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 282-291

Analyse the minimal multiplicity which probability is greater than a given threshold
====================================================================================

We fix *p* and we get the minimal multiplicity :math:`k_{max}` such that :

.. math::

   k_{max} = \arg\max \{k| \mbox{PTS}(k|n) \geq p \}


.. GENERATED FROM PYTHON SOURCE LINES 293-296

.. code-block:: default

    p = 1.0e-5
    nameSeuil = '10M5'








.. GENERATED FROM PYTHON SOURCE LINES 297-302

.. code-block:: default

    kMax = myECLM.computeKMaxPTS(p)
    print('kMax = ', kMax)

    # Then we use the bootstrap sample of the Mankamo parameters to generate a sample of :math:`k_{max}`. We analyse the distribution of $k_{max}$: we estimate it with the empirical distribution and we derive a confidence interval of order :math:`90\%`.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    kMax =  6




.. GENERATED FROM PYTHON SOURCE LINES 303-307

.. code-block:: default

    fileNameSampleParam = 'sampleParamFromMankamo_{}.csv'.format(Nbootstrap)
    fileNameSampleKmax = 'sampleKmaxFromMankamo_{}_{}.csv'.format(Nbootstrap, nameSeuil)
    gKmax = myECLM.computeAnalyseKMaxSample(p, fileNameSampleParam, fileNameSampleKmax)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Intervalle de confiance de niveau 90%: [ 4.0 ,  6.0 ]




.. GENERATED FROM PYTHON SOURCE LINES 308-310

.. code-block:: default

    view = View(gKmax)
    view.show()



.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_018.png
   :alt: Loi de $K_{max} = \arg \max \{k | PTS(k|$7$) \geq $1.0e-05$\}$
   :srcset: /auto_example/images/sphx_glr_plot_eclm_018.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.063 seconds)


.. _sphx_glr_download_auto_example_plot_eclm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_eclm.py <plot_eclm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_eclm.ipynb <plot_eclm.ipynb>`
