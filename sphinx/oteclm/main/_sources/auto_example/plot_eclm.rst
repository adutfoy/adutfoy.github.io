
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_eclm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_plot_eclm.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_eclm.py:


==============================
Extended Common Load Modelling
==============================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Import the required modules

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: default

    import openturns as ot
    from openturns.viewer import View
    import oteclm








.. GENERATED FROM PYTHON SOURCE LINES 15-25

Description
===========

We consider a common cause failure (CCF) groupe with *n=7* identical and independent components. The total impact vector of this CCF group is estimated after N=1002100 demands or tests on the group.

.. math::

    V_t^{n,N} = [1000000, 2000, 200, 30, 20, 5, 0, 0]



.. GENERATED FROM PYTHON SOURCE LINES 27-38

.. code-block:: default

    n = 7
    vectImpactTotal = ot.Indices(n+1)
    vectImpactTotal[0] = 1000000
    vectImpactTotal[1] = 2000
    vectImpactTotal[2] = 200
    vectImpactTotal[3] = 30
    vectImpactTotal[4] = 20
    vectImpactTotal[5] = 5
    vectImpactTotal[6] = 0
    vectImpactTotal[7] = 0








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Create the ECLM class. We will use the Gauss Legendre quadrature algorithm to compute all the integrals of the ECLM model. The use of 50 points is sufficicient to reach a good precision.

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: default

    myECLM = oteclm.ECLM(vectImpactTotal, ot.GaussLegendre([50]))








.. GENERATED FROM PYTHON SOURCE LINES 45-52

Estimate the optimal parameter
==============================

We use the Mankamo assumption. We use the maximum likelihood estimators of the *Mankamo parameter*. We want to get all the graphs of the likelihood function at the optimal Mankamo parameter.

We start by verifying that our starting point :math:`(P_x, C_{co}, c_x)` for the optimization algorithm verifies the constraints!


.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default

    startingPoint = [5.0e-3, 0.51, 0.85]
    print(myECLM.verifyMankamoConstraints(startingPoint))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    False




.. GENERATED FROM PYTHON SOURCE LINES 58-59

If the point is not valid, we can ask for a valid one by giving $C_x$.

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: default


    startingPoint = myECLM.computeValidMankamoStartingPoint(0.7)
    startingPoint






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0.00018494,0.35,0.7]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 64-65

Anyway, if the starting point is not valid, the function *estimateMaxLikelihoodFromMankamo* will automatically change it by itself.

.. GENERATED FROM PYTHON SOURCE LINES 67-73

.. code-block:: default

    visuLikelihood = True
    mankamoParam, generalParam, finalLogLikValue, graphesCol = myECLM.estimateMaxLikelihoodFromMankamo(startingPoint, visuLikelihood, verbose=False)
    print('Mankamo parameter : ', mankamoParam)
    print('general parameter : ', generalParam)
    print('finalLogLikValue : ', finalLogLikValue)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Traceback (most recent call last):
      File "/home/runner/work/otECLM/otECLM/oteclm/oteclm.py", line 357, in logVrais_Mankamo
        pi_weight, db, dx, dR, y_xm = self.computeGeneralParamFromMankamo([self.Pt, math.exp(logPx), Cco, Cx])
                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "/home/runner/work/otECLM/otECLM/oteclm/oteclm.py", line 650, in computeGeneralParamFromMankamo
        db = -math.sqrt(Cco)/ot.DistFunc.qNormal((Pt-Px)/pi_weight)
              ^^^^^^^^^^^^^^
    ValueError: math domain error
    Production of graphs
    graph (Cco, Cx) = (Cco_optim, Cx_optim)
    graph (logPx, Cx) = (logPx_optim, Cx_optim)
    graph (logPx, Cco) = (logPx_optim, Cco_optim)
    graph Cx = Cx_optim
    graph Cco = Cco_optim
    graph logPx = logPx_optim
    Mankamo parameter :  [0.00036988020585009376, 0.00012638564098075973, 0.016618553089392467, 0.016618554089392452]
    general parameter :  [0.9992134458844808, 0.03696320761892211, 0.03696320874982268, 0.284337442280199, 0.715662557719801]
    finalLogLikValue :  -21688.120239703418




.. GENERATED FROM PYTHON SOURCE LINES 74-80

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for i in range(6):
        gl.setGraph(i//3, i%3, graphesCol[i])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_001.png
   :alt: , Log likelihood at $(\log P_{x}, C_{co}) = $-8.98E+00,1.66E-02, Log likelihood at $(\log P_{x}, C_{x}) = $-8.98E+00,1.66E-02, Log likelihood at $(C_{co}, C_{x}) = $1.66E-02,1.66E-02, Log likelihood at $C_{x} = $1.66E-02, Log likelihood at $C_{co} = $1.66E-02, Log likelihood at $\log P_{x} = $-8.98E+00
   :srcset: /auto_example/images/sphx_glr_plot_eclm_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/test/lib/python3.11/site-packages/openturns/viewer.py:517: UserWarning: No contour levels were found within the data range.
      contourset = self._ax[0].contour(X, Y, Z, **contour_kw)




.. GENERATED FROM PYTHON SOURCE LINES 81-83

Compute the ECLM probabilities
==============================

.. GENERATED FROM PYTHON SOURCE LINES 85-100

.. code-block:: default

    PEG_list = myECLM.computePEGall()
    print('PEG_list = ', PEG_list)
    print('')

    PSG_list = myECLM.computePSGall()
    print('PSG_list = ', PSG_list)
    print('')

    PES_list = myECLM.computePESall()
    print('PES_list = ', PES_list)
    print('')

    PTS_list = myECLM.computePTSall()
    print('PTS_list = ', PTS_list)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PEG_list =  [0.9977483889645519, 0.0002861850402018761, 8.350892113546664e-06, 1.6749396040137301e-06, 3.5721722230960404e-07, 8.020295446258585e-08, 1.8938521181587126e-08, 4.699016448412273e-09]

    PSG_list =  [0.9999999999999792, 0.00036988020585009896, 2.1199183523693558e-05, 3.6654793212024215e-06, 6.593406656905352e-07, 1.227790132741724e-07, 2.3637537629999393e-08, 4.699016448412273e-09]

    PES_list =  [0.9977483889645519, 0.002003295281413133, 0.00017536873438447995, 5.8622886140480556e-05, 1.2502602780836142e-05, 1.6842620437143029e-06, 1.3256964827110988e-07, 4.699016448412273e-09]

    PTS_list =  [0.9999999999999792, 0.0022516110354273635, 0.0002483157540142305, 7.294701962975052e-05, 1.4324133489269965e-05, 1.821530708433825e-06, 1.3726866471952215e-07, 4.699016448412273e-09]




.. GENERATED FROM PYTHON SOURCE LINES 101-110

Generate a sample of the parameters by Bootstrap
================================================

We use the bootstrap sampling to get a sample of total impact vectors. Each total impact vector value is associated to an optimal Mankamo parameter and an optimal general parameter.
We fix the size of the bootstrap sample.
We also fix the number of realisations after which the sample is saved.
Each optimisation problem is initalised with the optimal parameter found for the total impact vector.

The sample is generated and saved in a csv file.

.. GENERATED FROM PYTHON SOURCE LINES 112-115

.. code-block:: default

    Nbootstrap = 100
    blockSize = 256








.. GENERATED FROM PYTHON SOURCE LINES 116-122

.. code-block:: default

    startingPoint = mankamoParam[1:4]
    fileNameSampleParam = 'sampleParamFromMankamo_{}.csv'.format(Nbootstrap)
    myECLM.estimateBootstrapParamSampleFromMankamo(Nbootstrap, startingPoint, blockSize, fileNameSampleParam)

    # Create the sample of all the ECLM probabilities associated to the sample of the parameters.








.. GENERATED FROM PYTHON SOURCE LINES 123-126

.. code-block:: default

    fileNameECLMProbabilities = 'sampleECLMProbabilitiesFromMankamo_{}.csv'.format(Nbootstrap)
    myECLM.computeECLMProbabilitiesFromMankano(blockSize, fileNameSampleParam, fileNameECLMProbabilities)








.. GENERATED FROM PYTHON SOURCE LINES 127-131

Graphically analyse the bootstrap sample of parameters
======================================================

We create the Pairs graphs of the Mankamo and general parameters.

.. GENERATED FROM PYTHON SOURCE LINES 133-135

.. code-block:: default

    graphPairsMankamoParam, graphPairsGeneralParam, graphMarg_list, descParam = myECLM.analyseGraphsECLMParam(fileNameSampleParam)








.. GENERATED FROM PYTHON SOURCE LINES 136-139

.. code-block:: default

    view = View(graphPairsMankamoParam)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_002.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 140-145

.. code-block:: default

    view = View(graphPairsGeneralParam)
    view.show()

    # We estimate the distribution of each parameter with a Histogram and a normal kernel smoothing.




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_003.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-152

.. code-block:: default

    gl = ot.GridLayout(3,3)
    for k in range(len(graphMarg_list)):
        gl.setGraph(k//3, k%3, graphMarg_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_004.png
   :alt: , Pt PDF, Px PDF, Cco PDF, Cx PDF, pi PDF, db PDF, dx PDF, dR PDF, yxm PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 153-157

Graphically analyse the bootstrap sample of the ECLM probabilities
==================================================================

We create the Pairs graphs of all the ECLM probabilities. We limit the graphical study to the multiplicities lesser than :math:`k_{max}`.

.. GENERATED FROM PYTHON SOURCE LINES 159-163

.. code-block:: default

    kMax = 5

    graphPairs_list, graphPEG_PES_PTS_list, graphMargPEG_list, graphMargPSG_list, graphMargPES_list, graphMargPTS_list, desc_list = myECLM.analyseGraphsECLMProbabilities(fileNameECLMProbabilities, kMax)








.. GENERATED FROM PYTHON SOURCE LINES 164-171

.. code-block:: default

    descPairs = desc_list[0]
    descPEG_PES_PTS = desc_list[1]
    descMargPEG = desc_list[2]
    descMargPSG = desc_list[3]
    descMargPES = desc_list[4]
    descMargPTS = desc_list[5]








.. GENERATED FROM PYTHON SOURCE LINES 172-175

.. code-block:: default

    view = View(graphPairs_list[0])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_005.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 176-179

.. code-block:: default

    view = View(graphPairs_list[1])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_006.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 180-183

.. code-block:: default

    view = View(graphPairs_list[2])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_007.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 184-187

.. code-block:: default

    view = View(graphPairs_list[3])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_008.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 188-189

Fix a k <=kMax

.. GENERATED FROM PYTHON SOURCE LINES 189-194

.. code-block:: default


    k = 0
    view = View(graphPEG_PES_PTS_list[k])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_009.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 195-202

.. code-block:: default

    len(graphMargPEG_list)
    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPEG_list)):
        gl.setGraph(k//3, k%3, graphMargPEG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_010.png
   :alt: , PEG(0|7) PDF, PEG(1|7) PDF, PEG(2|7) PDF, PEG(3|7) PDF, PEG(4|7) PDF, PEG(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 203-209

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPSG_list)):
        gl.setGraph(k//3, k%3, graphMargPSG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_011.png
   :alt: , PSG(0) PDF, PSG(1) PDF, PSG(2) PDF, PSG(3) PDF, PSG(4) PDF, PSG(5) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 210-216

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPES_list)):
        gl.setGraph(k//3, k%3, graphMargPES_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_012.png
   :alt: , PES(0|7) PDF, PES(1|7) PDF, PES(2|7) PDF, PES(3|7) PDF, PES(4|7) PDF, PES(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 217-223

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPTS_list)):
        gl.setGraph(k//3, k%3, graphMargPTS_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_013.png
   :alt: , PTS(0|7) PDF, PTS(1|7) PDF, PTS(2|7) PDF, PTS(3|7) PDF, PTS(4|7) PDF, PTS(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 224-229

Fit a distribution to the ECLM probabilities
============================================

We fit a distribution among a given list to each ECLM probability. We test it with the Lilliefors test. 
We also compute the confidence interval of the specified level.

.. GENERATED FROM PYTHON SOURCE LINES 231-239

.. code-block:: default

    factoryColl = [ot.BetaFactory(), ot.LogNormalFactory(), ot.GammaFactory()]
    confidenceLevel = 0.9
    IC_list, graphMarg_list, descMarg_list = myECLM.analyseDistECLMProbabilities(fileNameECLMProbabilities, kMax, confidenceLevel, factoryColl)

    IC_PEG_list, IC_PSG_list, IC_PES_list, IC_PTS_list = IC_list
    graphMargPEG_list, graphMargPSG_list, graphMargPES_list, graphMargPTS_list = graphMarg_list
    descMargPEG, descMargPSG, descMargPES, descMargPTS = descMarg_list





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Test de Lilliefors
    ==================

    Ordre k= 0
    Best model PEG( 0 |n) :  Beta(alpha = 2.22441, beta = 2.01594, a = 0.997621, b = 0.997858) p-value =  0.865
    Best model PSG( 0 |n) :  LogNormal(muLog = -24.9791, sigmaLog = 3.48515e-05, gamma = 1) p-value =  0.001998001998001998
    Best model PES( 0 |n) :  Beta(alpha = 2.22441, beta = 2.01594, a = 0.997621, b = 0.997858) p-value =  0.8759191176470589
    Best model PTS( 0 |n) :  LogNormal(muLog = -25.5486, sigmaLog = 6.33377e-05, gamma = 1) p-value =  0.000999000999000999

    Test de Lilliefors
    ==================

    Ordre k= 1
    Best model PEG( 1 |n) :  LogNormal(muLog = -9.28383, sigmaLog = 0.0816526, gamma = 0.000193554) p-value =  0.965625
    Best model PSG( 1 |n) :  Beta(alpha = 2.0922, beta = 2.36032, a = 0.000351093, b = 0.000392658) p-value =  0.6449781659388646
    Best model PES( 1 |n) :  LogNormal(muLog = -7.33792, sigmaLog = 0.0816526, gamma = 0.00135488) p-value =  0.962037962037962
    Best model PTS( 1 |n) :  Beta(alpha = 2.01594, beta = 2.22441, a = 0.00214164, b = 0.00237925) p-value =  0.871875

    Test de Lilliefors
    ==================

    Ordre k= 2
    Best model PEG( 2 |n) :  Beta(alpha = 2.63448, beta = 3.30211, a = 6.73386e-06, b = 1.00707e-05) p-value =  0.676873857404022
    Best model PSG( 2 |n) :  Beta(alpha = 2.08255, beta = 1.76742, a = 1.63471e-05, b = 2.60029e-05) p-value =  0.4885954381752701
    Best model PES( 2 |n) :  Beta(alpha = 2.63448, beta = 3.30211, a = 0.000141411, b = 0.000211485) p-value =  0.6648721399730821
    Best model PTS( 2 |n) :  LogNormal(muLog = 2.02785, sigmaLog = 2.4387e-06, gamma = -7.59749) p-value =  0.0999000999000999

    Test de Lilliefors
    ==================

    Ordre k= 3
    Best model PEG( 3 |n) :  LogNormal(muLog = -5.91812, sigmaLog = 5.79888e-05, gamma = -0.00268856) p-value =  0.614743856726364
    Best model PSG( 3 |n) :  Beta(alpha = 1.29306, beta = 1.97543, a = 2.66657e-06, b = 5.79627e-06) p-value =  0.2857142857142857
    Best model PES( 3 |n) :  LogNormal(muLog = -0.0197005, sigmaLog = 5.56876e-06, gamma = -0.980433) p-value =  0.6109954185755935
    Best model PTS( 3 |n) :  Beta(alpha = 1.7864, beta = 1.60859, a = 5.54236e-05, b = 9.19529e-05) p-value =  0.7963190184049079

    Test de Lilliefors
    ==================

    Ordre k= 4
    Best model PEG( 4 |n) :  Beta(alpha = 1.1514, beta = 1.73015, a = 2.55536e-07, b = 5.70478e-07) p-value =  0.16138540899042003
    Best model PSG( 4 |n) :  Beta(alpha = 0.860236, beta = 2.0805, a = 4.38527e-07, b = 1.53251e-06) p-value =  0.06293706293706294
    Best model PES( 4 |n) :  Beta(alpha = 1.1514, beta = 1.73015, a = 8.94377e-06, b = 1.99667e-05) p-value =  0.17952380952380953
    Best model PTS( 4 |n) :  Beta(alpha = 1.04652, beta = 1.78213, a = 1.00897e-05, b = 2.48574e-05) p-value =  0.15142857142857144

    Test de Lilliefors
    ==================

    Ordre k= 5
    Best model PEG( 5 |n) :  Beta(alpha = 0.804418, beta = 1.99689, a = 4.88689e-08, b = 2.11277e-07) p-value =  0.34059582036460656
    Best model PSG( 5 |n) :  Beta(alpha = 0.718938, beta = 2.30618, a = 6.75452e-08, b = 4.52174e-07) p-value =  0.4519774011299435
    Best model PES( 5 |n) :  Beta(alpha = 0.804418, beta = 1.99689, a = 1.02625e-06, b = 4.43682e-06) p-value =  0.34057649667405765
    Best model PTS( 5 |n) :  Beta(alpha = 0.787536, beta = 2.07881, a = 1.08832e-06, b = 5.15282e-06) p-value =  0.42430441898527005





.. GENERATED FROM PYTHON SOURCE LINES 240-254

.. code-block:: default

    for k in range(len(IC_PEG_list)):
        print('IC_PEG_', k, ' = ', IC_PEG_list[k])

    for k in range(len(IC_PSG_list)):
        print('IC_PSG_', k, ' = ', IC_PSG_list[k])

    for k in range(len(IC_PES_list)):
        print('IC_PES_', k, ' = ', IC_PES_list[k])

    for k in range(len(IC_PTS_list)):
        print('IC_PTS_', k, ' = ', IC_PTS_list[k])

    # We draw all the estimated distributions and the title gives the best model.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    IC_PEG_ 0  =  [0.997651, 0.997836]
    IC_PEG_ 1  =  [0.000273184, 0.000301307]
    IC_PEG_ 2  =  [7.08472e-06, 9.30121e-06]
    IC_PEG_ 3  =  [1.39748e-06, 1.96271e-06]
    IC_PEG_ 4  =  [2.69886e-07, 5.19672e-07]
    IC_PEG_ 5  =  [5.01128e-08, 1.66422e-07]
    IC_PSG_ 0  =  [1, 1]
    IC_PSG_ 1  =  [0.000354533, 0.000386447]
    IC_PSG_ 2  =  [1.75357e-05, 2.55325e-05]
    IC_PSG_ 3  =  [2.84025e-06, 5.24218e-06]
    IC_PSG_ 4  =  [4.51787e-07, 1.22929e-06]
    IC_PSG_ 5  =  [6.86612e-08, 3.15938e-07]
    IC_PES_ 0  =  [0.997651, 0.997836]
    IC_PES_ 1  =  [0.00191229, 0.00210915]
    IC_PES_ 2  =  [0.000148778, 0.000195326]
    IC_PES_ 3  =  [4.89111e-05, 6.86955e-05]
    IC_PES_ 4  =  [9.44896e-06, 1.8187e-05]
    IC_PES_ 5  =  [1.05275e-06, 3.49478e-06]
    IC_PTS_ 0  =  [1, 1]
    IC_PTS_ 1  =  [0.00216366, 0.00234939]
    IC_PTS_ 2  =  [0.000212923, 0.000278992]
    IC_PTS_ 3  =  [5.90642e-05, 9.04915e-05]
    IC_PTS_ 4  =  [1.0601e-05, 2.21149e-05]
    IC_PTS_ 5  =  [1.11445e-06, 3.95285e-06]




.. GENERATED FROM PYTHON SOURCE LINES 255-261

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPEG_list)):
        gl.setGraph(k//3, k%3, graphMargPEG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_014.png
   :alt: , PEG(0|7) - best model : Beta, PEG(1|7) - best model : LogNormal, PEG(2|7) - best model : Beta, PEG(3|7) - best model : LogNormal, PEG(4|7) - best model : Beta, PEG(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 262-268

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPSG_list)):
        gl.setGraph(k//3, k%3, graphMargPSG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_015.png
   :alt: , PSG(0|7) - best model : LogNormal, PSG(1|7) - best model : Beta, PSG(2|7) - best model : Beta, PSG(3|7) - best model : Beta, PSG(4|7) - best model : Beta, PSG(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_015.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 269-275

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPES_list)):
            gl.setGraph(k//3, k%3, graphMargPES_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_016.png
   :alt: , PES(0|7) - best model : Beta, PES(1|7) - best model : LogNormal, PES(2|7) - best model : Beta, PES(3|7) - best model : LogNormal, PES(4|7) - best model : Beta, PES(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_016.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 276-282

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPTS_list)):
        gl.setGraph(k//3, k%3, graphMargPTS_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_017.png
   :alt: , PTS(0|7) - best model : LogNormal, PTS(1|7) - best model : Beta, PTS(2|7) - best model : LogNormal, PTS(3|7) - best model : Beta, PTS(4|7) - best model : Beta, PTS(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_017.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 283-292

Analyse the minimal multiplicity which probability is greater than a given threshold
====================================================================================

We fix *p* and we get the minimal multiplicity :math:`k_{max}` such that :

.. math::

   k_{max} = \arg\max \{k| \mbox{PTS}(k|n) \geq p \}


.. GENERATED FROM PYTHON SOURCE LINES 294-297

.. code-block:: default

    p = 1.0e-5
    nameSeuil = '10M5'








.. GENERATED FROM PYTHON SOURCE LINES 298-303

.. code-block:: default

    kMax = myECLM.computeKMaxPTS(p)
    print('kMax = ', kMax)

    # Then we use the bootstrap sample of the Mankamo parameters to generate a sample of :math:`k_{max}`. We analyse the distribution of $k_{max}$: we estimate it with the empirical distribution and we derive a confidence interval of order :math:`90\%`.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    kMax =  4




.. GENERATED FROM PYTHON SOURCE LINES 304-308

.. code-block:: default

    fileNameSampleParam = 'sampleParamFromMankamo_{}.csv'.format(Nbootstrap)
    fileNameSampleKmax = 'sampleKmaxFromMankamo_{}_{}.csv'.format(Nbootstrap, nameSeuil)
    gKmax = myECLM.computeAnalyseKMaxSample(p, blockSize, fileNameSampleParam, fileNameSampleKmax)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Intervalle de confiance de niveau 90%: [ 4.0 ,  4.0 ]




.. GENERATED FROM PYTHON SOURCE LINES 309-311

.. code-block:: default

    view = View(gKmax)
    view.show()



.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_018.png
   :alt: Loi de $K_{max} = \arg \max \{k | PTS(k|$7$) \geq $1.0e-05$\}$
   :srcset: /auto_example/images/sphx_glr_plot_eclm_018.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  3.987 seconds)


.. _sphx_glr_download_auto_example_plot_eclm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_eclm.py <plot_eclm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_eclm.ipynb <plot_eclm.ipynb>`
