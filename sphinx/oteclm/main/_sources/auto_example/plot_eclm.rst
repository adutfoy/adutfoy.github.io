
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_eclm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_example_plot_eclm.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_eclm.py:


==============================
Extended Common Load Modelling
==============================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Import the required modules

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: default

    import openturns as ot
    from openturns.viewer import View
    import oteclm








.. GENERATED FROM PYTHON SOURCE LINES 15-25

Description
===========

We consider a common cause failure (CCF) groupe with *n=7* identical and independent components. The total impact vector of this CCF group is estimated after N=1002100 demands or tests on the group.

.. math::

    V_t^{n,N} = [1000000, 2000, 200, 30, 20, 5, 0, 0]



.. GENERATED FROM PYTHON SOURCE LINES 27-38

.. code-block:: default

    n = 7
    vectImpactTotal = ot.Indices(n+1)
    vectImpactTotal[0] = 1000000
    vectImpactTotal[1] = 2000
    vectImpactTotal[2] = 200
    vectImpactTotal[3] = 30
    vectImpactTotal[4] = 20
    vectImpactTotal[5] = 5
    vectImpactTotal[6] = 0
    vectImpactTotal[7] = 0








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Create the ECLM class. We will use the Gauss Legendre quadrature algorithm to compute all the integrals of the ECLM model. The use of 50 points is sufficicient to reach a good precision.

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: default

    myECLM = oteclm.ECLM(vectImpactTotal, ot.GaussLegendre([50]))








.. GENERATED FROM PYTHON SOURCE LINES 45-52

Estimate the optimal parameter
==============================

We use the Mankamo assumption. We use the maximum likelihood estimators of the *Mankamo parameter*. We want to get all the graphs of the likelihood function at the optimal Mankamo parameter.

We start by verifying that our starting point :math:`(P_x, C_{co}, c_x)` for the optimization algorithm verifies the constraints!


.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default

    startingPoint = [5.0e-3, 0.51, 0.85]
    print('Proposed starting point valid?: ', myECLM.verifyMankamoConstraints(startingPoint))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Proposed starting point valid?:  False




.. GENERATED FROM PYTHON SOURCE LINES 58-59

If the point is not valid, we can ask for a valid one by giving $C_x$.

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: default


    startingPoint = myECLM.computeValidMankamoStartingPoint(0.7)
    startingPoint






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0.00018494,0.35,0.7]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 64-65

Anyway, if the starting point is not valid, the function *estimateMaxLikelihoodFromMankamo* will automatically change it by itself.

.. GENERATED FROM PYTHON SOURCE LINES 67-73

.. code-block:: default

    visuLikelihood = True
    mankamoParam, generalParam, finalLogLikValue, graphesCol = myECLM.estimateMaxLikelihoodFromMankamo(startingPoint, visuLikelihood)
    print('Mankamo parameter : ', mankamoParam)
    print('general parameter : ', generalParam)
    print('finalLogLikValue : ', finalLogLikValue)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Production of graphs
    graph (Cco, Cx) = (Cco_optim, Cx_optim)
    graph (logPx, Cx) = (logPx_optim, Cx_optim)
    graph (logPx, Cco) = (logPx_optim, Cco_optim)
    graph Cx = Cx_optim
    graph Cco = Cco_optim
    graph logPx = logPx_optim
    Mankamo parameter :  [0.00036988020585009376, 0.00012952147966373113, 0.2658266078353387, 0.26582660783533874]
    general parameter :  [0.99933838922154, 0.1476851756628588, 0.14768517566285883, 0.24543528522847904, 0.754564714771521]
    finalLogLikValue :  -0.02167747439543925




.. GENERATED FROM PYTHON SOURCE LINES 74-75

Function to deactivate grid in GridLayout to make matplotlib happy

.. GENERATED FROM PYTHON SOURCE LINES 75-93

.. code-block:: default

    def deactivateGrid(gl):
        for i in range(gl.getNbRows()):
            for j in range(gl.getNbColumns()):
                g = gl.getGraph(i, j)
                g.setGrid(False)
                gl.setGraph(i, j, g)
        return gl

    gl = ot.GridLayout(2, 3)
    for i in range(6):
        g = graphesCol[i]
        gl.setGraph(i//3, i%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_001.png
   :alt: , Log likelihood at $(\log P_{x}, C_{co}) = ($-8.95E+00,2.66E-01), Log likelihood at $(\log P_{x}, C_{x}) = ($-8.95E+00,2.66E-01), Log likelihood at $(C_{co}, C_{x}) = ($2.66E-01,2.66E-01), Log likelihood at $C_{x} = $2.66E-01, Log likelihood at $C_{co} = $2.66E-01, Log likelihood at $\log P_{x} = $-8.95E+00
   :srcset: /auto_example/images/sphx_glr_plot_eclm_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/test/lib/python3.11/site-packages/openturns/viewer.py:532: UserWarning: No contour levels were found within the data range.
      contourset = self._ax[0].contour(X, Y, Z, **contour_kw)




.. GENERATED FROM PYTHON SOURCE LINES 94-96

Compute the ECLM probabilities
==============================

.. GENERATED FROM PYTHON SOURCE LINES 98-113

.. code-block:: default

    PEG_list = myECLM.computePEGall()
    print('PEG_list = ', PEG_list)
    print('')

    PSG_list = myECLM.computePSGall()
    print('PSG_list = ', PSG_list)
    print('')

    PES_list = myECLM.computePESall()
    print('PES_list = ', PES_list)
    print('')

    PTS_list = myECLM.computePTSall()
    print('PTS_list = ', PTS_list)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PEG_list =  [0.9979685128453654, 0.00024955737932482353, 6.732445116140214e-06, 1.922081438048188e-06, 1.1331572963762106e-06, 1.0535799779325168e-06, 1.515528008560812e-06, 3.5369206007148977e-06]

    PSG_list =  [1.0, 0.000369880205850105, 4.9324785692987386e-05, 2.2375223126106277e-05, 1.2377401856571094e-05, 7.621556595769038e-06, 5.05244860927571e-06, 3.5369206007148977e-06]

    PES_list =  [0.9979685128453654, 0.0017469016552737646, 0.0001413813474389445, 6.727285033168659e-05, 3.966050537316737e-05, 2.2125179536582855e-05, 1.0608696059925683e-05, 3.5369206007148977e-06]

    PTS_list =  [1.0, 0.002031487154614786, 0.00028458549934102194, 0.00014320415190207742, 7.59313015703908e-05, 3.627079619722344e-05, 1.4145616660640582e-05, 3.5369206007148977e-06]




.. GENERATED FROM PYTHON SOURCE LINES 114-123

Generate a sample of the parameters by Bootstrap
================================================

We use the bootstrap sampling to get a sample of total impact vectors. Each total impact vector value is associated to an optimal Mankamo parameter and an optimal general parameter.
We fix the size of the bootstrap sample.
We also fix the number of realisations after which the sample is saved.
Each optimisation problem is initalised with the optimal parameter found for the total impact vector.

The sample is generated and saved in a csv file.

.. GENERATED FROM PYTHON SOURCE LINES 125-127

.. code-block:: default

    Nbootstrap = 100








.. GENERATED FROM PYTHON SOURCE LINES 128-134

.. code-block:: default

    startingPoint = mankamoParam[1:4]
    fileNameSampleParam = 'sampleParamFromMankamo_{}.csv'.format(Nbootstrap)
    myECLM.estimateBootstrapParamSampleFromMankamo(Nbootstrap, startingPoint, fileNameSampleParam)

    # Create the sample of all the ECLM probabilities associated to the sample of the parameters.








.. GENERATED FROM PYTHON SOURCE LINES 135-138

.. code-block:: default

    fileNameECLMProbabilities = 'sampleECLMProbabilitiesFromMankamo_{}.csv'.format(Nbootstrap)
    myECLM.computeECLMProbabilitiesFromMankano(fileNameSampleParam, fileNameECLMProbabilities)








.. GENERATED FROM PYTHON SOURCE LINES 139-143

Graphically analyse the bootstrap sample of parameters
======================================================

We create the Pairs graphs of the Mankamo and general parameters.

.. GENERATED FROM PYTHON SOURCE LINES 145-147

.. code-block:: default

    graphPairsMankamoParam, graphPairsGeneralParam, graphMarg_list, descParam = myECLM.analyseGraphsECLMParam(fileNameSampleParam)








.. GENERATED FROM PYTHON SOURCE LINES 148-149

Deactivate grid to make matplotlib happy

.. GENERATED FROM PYTHON SOURCE LINES 149-154

.. code-block:: default

    graphPairsMankamoParam = deactivateGrid(graphPairsMankamoParam)

    view = View(graphPairsMankamoParam)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_002.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 155-156

Deactivate grid to make matplotlib happy

.. GENERATED FROM PYTHON SOURCE LINES 156-163

.. code-block:: default

    graphPairsGeneralParam = deactivateGrid(graphPairsGeneralParam)

    view = View(graphPairsGeneralParam)
    view.show()

    # We estimate the distribution of each parameter with a Histogram and a normal kernel smoothing.




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_003.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-174

.. code-block:: default

    gl = ot.GridLayout(3,3)
    for k in range(len(graphMarg_list)):
        g = graphMarg_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_004.png
   :alt: , Pt PDF, Px PDF, Cco PDF, Cx PDF, pi PDF, db PDF, dx PDF, dR PDF, yxm PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 175-179

Graphically analyse the bootstrap sample of the ECLM probabilities
==================================================================

We create the Pairs graphs of all the ECLM probabilities. We limit the graphical study to the multiplicities lesser than :math:`k_{max}`.

.. GENERATED FROM PYTHON SOURCE LINES 181-185

.. code-block:: default

    kMax = 5

    graphPairs_list, graphPEG_PES_PTS_list, graphMargPEG_list, graphMargPSG_list, graphMargPES_list, graphMargPTS_list, desc_list = myECLM.analyseGraphsECLMProbabilities(fileNameECLMProbabilities, kMax)








.. GENERATED FROM PYTHON SOURCE LINES 186-193

.. code-block:: default

    descPairs = desc_list[0]
    descPEG_PES_PTS = desc_list[1]
    descMargPEG = desc_list[2]
    descMargPSG = desc_list[3]
    descMargPES = desc_list[4]
    descMargPTS = desc_list[5]








.. GENERATED FROM PYTHON SOURCE LINES 194-195

Deactivate grid to make matplotlib happy

.. GENERATED FROM PYTHON SOURCE LINES 195-200

.. code-block:: default

    graphPairs_list[0] = deactivateGrid(graphPairs_list[0])

    view = View(graphPairs_list[0])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_005.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 201-202

Deactivate grid to make matplotlib happy

.. GENERATED FROM PYTHON SOURCE LINES 202-207

.. code-block:: default

    graphPairs_list[1] = deactivateGrid(graphPairs_list[1])

    view = View(graphPairs_list[1])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_006.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 208-209

Deactivate grid to make matplotlib happy

.. GENERATED FROM PYTHON SOURCE LINES 209-214

.. code-block:: default

    graphPairs_list[2] = deactivateGrid(graphPairs_list[2])

    view = View(graphPairs_list[2])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_007.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 215-216

Deactivate grid to make matplotlib happy

.. GENERATED FROM PYTHON SOURCE LINES 216-221

.. code-block:: default

    graphPairs_list[3] = deactivateGrid(graphPairs_list[3])

    view = View(graphPairs_list[3])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_008.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 222-223

Fix a k <=kMax

.. GENERATED FROM PYTHON SOURCE LINES 223-230

.. code-block:: default


    k = 0
    gl = graphPEG_PES_PTS_list[k]
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_009.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 231-242

.. code-block:: default

    len(graphMargPEG_list)
    gl = ot.GridLayout(2, 3)
    for k in range(6):
        g = graphMargPEG_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_010.png
   :alt: , PEG(0|7) PDF, PEG(1|7) PDF, PEG(2|7) PDF, PEG(3|7) PDF, PEG(4|7) PDF, PEG(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 243-253

.. code-block:: default

    gl = ot.GridLayout(2, 3)
    for k in range(6):
        g = graphMargPSG_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_011.png
   :alt: , PSG(0) PDF, PSG(1) PDF, PSG(2) PDF, PSG(3) PDF, PSG(4) PDF, PSG(5) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 254-264

.. code-block:: default

    gl = ot.GridLayout(2, 3)
    for k in range(6):
        g = graphMargPES_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_012.png
   :alt: , PES(0|7) PDF, PES(1|7) PDF, PES(2|7) PDF, PES(3|7) PDF, PES(4|7) PDF, PES(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 265-275

.. code-block:: default

    gl = ot.GridLayout(2, 3)
    for k in range(6):
        g = graphMargPTS_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_013.png
   :alt: , PTS(0|7) PDF, PTS(1|7) PDF, PTS(2|7) PDF, PTS(3|7) PDF, PTS(4|7) PDF, PTS(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 276-281

Fit a distribution to the ECLM probabilities
============================================

We fit a distribution among a given list to each ECLM probability. We test it with the Lilliefors test. 
We also compute the confidence interval of the specified level.

.. GENERATED FROM PYTHON SOURCE LINES 283-291

.. code-block:: default

    factoryColl = [ot.BetaFactory(), ot.LogNormalFactory(), ot.GammaFactory()]
    confidenceLevel = 0.9
    IC_list, graphMarg_list, descMarg_list = myECLM.analyseDistECLMProbabilities(fileNameECLMProbabilities, kMax, confidenceLevel, factoryColl)

    IC_PEG_list, IC_PSG_list, IC_PES_list, IC_PTS_list = IC_list
    graphMargPEG_list, graphMargPSG_list, graphMargPES_list, graphMargPTS_list = graphMarg_list
    descMargPEG, descMargPSG, descMargPES, descMargPTS = descMarg_list





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Test de Lilliefors
    ==================

    Ordre k= 0
    PEG...
    Best model PEG( 0 |n) :  Beta(alpha = 2.3886, beta = 2.14454, a = 0.99775, b = 0.998033) p-value =  0.6630570595585173
    PSG...
    PES...
    Best model PES( 0 |n) :  Beta(alpha = 2.3886, beta = 2.14454, a = 0.99775, b = 0.998033) p-value =  0.6585365853658537
    PTS...

    Test de Lilliefors
    ==================

    Ordre k= 1
    PEG...
    Best model PEG( 1 |n) :  Beta(alpha = 2.15125, beta = 2.38698, a = 0.000242765, b = 0.000282381) p-value =  0.6551436901291129
    PSG...
    Best model PSG( 1 |n) :  Beta(alpha = 2.0922, beta = 2.36032, a = 0.000351093, b = 0.000392658) p-value =  0.646813827571845
    PES...
    Best model PES( 1 |n) :  Beta(alpha = 2.15125, beta = 2.38698, a = 0.00169936, b = 0.00197667) p-value =  0.6653338664534187
    PTS...
    Best model PTS( 1 |n) :  Beta(alpha = 2.14454, beta = 2.3886, a = 0.00196691, b = 0.00225046) p-value =  0.6705539358600583

    Test de Lilliefors
    ==================

    Ordre k= 2
    PEG...
    Best model PEG( 2 |n) :  Beta(alpha = 2.02908, beta = 2.22899, a = 6.54325e-06, b = 6.82266e-06) p-value =  0.5813475760065735
    PSG...
    Best model PSG( 2 |n) :  LogNormal(muLog = 0.461131, sigmaLog = 4.52496e-07, gamma = -1.58583) p-value =  0.0
    PES...
    Best model PES( 2 |n) :  Beta(alpha = 2.02908, beta = 2.22899, a = 0.000137408, b = 0.000143276) p-value =  0.6001599360255898
    PTS...
    Best model PTS( 2 |n) :  Beta(alpha = 8.98097, beta = 2.1945, a = 0.000254019, b = 0.000274206) p-value =  0.000999000999000999

    Test de Lilliefors
    ==================

    Ordre k= 3
    PEG...
    Best model PEG( 3 |n) :  LogNormal(muLog = -6.69594, sigmaLog = 6.44888e-06, gamma = -0.00123392) p-value =  0.0
    PSG...
    Best model PSG( 3 |n) :  LogNormal(muLog = -0.941674, sigmaLog = 1.1672e-06, gamma = -0.389959) p-value =  0.0
    PES...
    Best model PES( 3 |n) :  LogNormal(muLog = -3.5576, sigmaLog = 9.78561e-06, gamma = -0.0284373) p-value =  0.0
    PTS...
    Best model PTS( 3 |n) :  LogNormal(muLog = 0.569423, sigmaLog = 9.04962e-07, gamma = -1.76712) p-value =  0.0

    Test de Lilliefors
    ==================

    Ordre k= 4
    PEG...
    Best model PEG( 4 |n) :  LogNormal(muLog = -5.6057, sigmaLog = 4.14456e-06, gamma = -0.00367582) p-value =  0.0
    PSG...
    Best model PSG( 4 |n) :  LogNormal(muLog = -2.23317, sigmaLog = 2.75022e-06, gamma = -0.107181) p-value =  0.0
    PES...
    Best model PES( 4 |n) :  LogNormal(muLog = -2.14538, sigmaLog = 4.558e-06, gamma = -0.116988) p-value =  0.0
    PTS...
    Best model PTS( 4 |n) :  LogNormal(muLog = 0.0448481, sigmaLog = 1.32723e-06, gamma = -1.04581) p-value =  0.0

    Test de Lilliefors
    ==================

    Ordre k= 5
    PEG...
    Best model PEG( 5 |n) :  LogNormal(muLog = -6.43907, sigmaLog = 1.45787e-05, gamma = -0.0015971) p-value =  0.0
    PSG...
    Best model PSG( 5 |n) :  LogNormal(muLog = -3.67219, sigmaLog = 7.60526e-06, gamma = -0.0254168) p-value =  0.0
    PES...
    Best model PES( 5 |n) :  LogNormal(muLog = -0.920554, sigmaLog = 1.22806e-06, gamma = -0.398282) p-value =  0.0
    PTS...
    Best model PTS( 5 |n) :  LogNormal(muLog = 0.640873, sigmaLog = 4.52588e-07, gamma = -1.89811) p-value =  0.0





.. GENERATED FROM PYTHON SOURCE LINES 292-306

.. code-block:: default

    for k in range(len(IC_PEG_list)):
        print('IC_PEG_', k, ' = ', IC_PEG_list[k])

    for k in range(len(IC_PSG_list)):
        print('IC_PSG_', k, ' = ', IC_PSG_list[k])

    for k in range(len(IC_PES_list)):
        print('IC_PES_', k, ' = ', IC_PES_list[k])

    for k in range(len(IC_PTS_list)):
        print('IC_PTS_', k, ' = ', IC_PTS_list[k])

    # We draw all the estimated distributions and the title gives the best model.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    IC_PEG_ 0  =  [0.997792, 0.998009]
    IC_PEG_ 1  =  [0.000246163, 0.000276484]
    IC_PEG_ 2  =  [6.56927e-06, 6.78492e-06]
    IC_PEG_ 3  =  [1.98657e-06, 2.00655e-06]
    IC_PEG_ 4  =  [1.03165e-06, 1.04412e-06]
    IC_PEG_ 5  =  [7.77954e-07, 8.02603e-07]
    IC_PSG_ 0  =  [1, 1]
    IC_PSG_ 1  =  [0.000354533, 0.000386447]
    IC_PSG_ 2  =  [4.02934e-05, 4.10863e-05]
    IC_PSG_ 3  =  [1.54995e-05, 1.60223e-05]
    IC_PSG_ 4  =  [7.22339e-06, 7.5967e-06]
    IC_PSG_ 5  =  [3.79208e-06, 4.05438e-06]
    IC_PES_ 0  =  [0.997792, 0.998009]
    IC_PES_ 1  =  [0.00172314, 0.00193539]
    IC_PES_ 2  =  [0.000137956, 0.000142482]
    IC_PES_ 3  =  [6.95282e-05, 7.02297e-05]
    IC_PES_ 4  =  [3.61061e-05, 3.65452e-05]
    IC_PES_ 5  =  [1.63351e-05, 1.68563e-05]
    IC_PTS_ 0  =  [1, 1]
    IC_PTS_ 1  =  [0.00199096, 0.00220844]
    IC_PTS_ 2  =  [0.000267524, 0.000273146]
    IC_PTS_ 3  =  [0.000129525, 0.000131002]
    IC_PTS_ 4  =  [5.97031e-05, 6.11001e-05]
    IC_PTS_ 5  =  [2.3561e-05, 2.45753e-05]




.. GENERATED FROM PYTHON SOURCE LINES 307-317

.. code-block:: default

    gl = ot.GridLayout(2, 3)
    for k in range(6):
        g = graphMargPEG_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_014.png
   :alt: , PEG(0|7) - best model : Beta, PEG(1|7) - best model : Beta, PEG(2|7) - best model : Beta, PEG(3|7) - best model : LogNormal, PEG(4|7) - best model : LogNormal, PEG(5|7) - best model : LogNormal
   :srcset: /auto_example/images/sphx_glr_plot_eclm_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 318-328

.. code-block:: default

    gl = ot.GridLayout(2, 3)
    for k in range(6):
        g = graphMargPSG_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_015.png
   :alt: , PSG(0|7), PSG(1|7) - best model : Beta, PSG(2|7) - best model : LogNormal, PSG(3|7) - best model : LogNormal, PSG(4|7) - best model : LogNormal, PSG(5|7) - best model : LogNormal
   :srcset: /auto_example/images/sphx_glr_plot_eclm_015.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 329-339

.. code-block:: default

    gl = ot.GridLayout(2, 3)
    for k in range(6):
        g = graphMargPES_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_016.png
   :alt: , PES(0|7) - best model : Beta, PES(1|7) - best model : Beta, PES(2|7) - best model : Beta, PES(3|7) - best model : LogNormal, PES(4|7) - best model : LogNormal, PES(5|7) - best model : LogNormal
   :srcset: /auto_example/images/sphx_glr_plot_eclm_016.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 340-350

.. code-block:: default

    gl = ot.GridLayout(2, 3)
    for k in range(6):
        g = graphMargPTS_list[k]
        gl.setGraph(k//3, k%3, g)

    # Deactivate grid to make matplotlib happy
    gl = deactivateGrid(gl)
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_017.png
   :alt: , PTS(0|7), PTS(1|7) - best model : Beta, PTS(2|7) - best model : Beta, PTS(3|7) - best model : LogNormal, PTS(4|7) - best model : LogNormal, PTS(5|7) - best model : LogNormal
   :srcset: /auto_example/images/sphx_glr_plot_eclm_017.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 351-360

Analyse the minimal multiplicity which probability is greater than a given threshold
====================================================================================

We fix *p* and we get the minimal multiplicity :math:`k_{max}` such that :

.. math::

   k_{max} = \arg\max \{k| \mbox{PTS}(k|n) \geq p \}


.. GENERATED FROM PYTHON SOURCE LINES 362-365

.. code-block:: default

    p = 1.0e-5
    nameSeuil = '10M5'








.. GENERATED FROM PYTHON SOURCE LINES 366-371

.. code-block:: default

    kMax = myECLM.computeKMaxPTS(p)
    print('kMax = ', kMax)

    # Then we use the bootstrap sample of the Mankamo parameters to generate a sample of :math:`k_{max}`. We analyse the distribution of $k_{max}$: we estimate it with the empirical distribution and we derive a confidence interval of order :math:`90\%`.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    kMax =  6




.. GENERATED FROM PYTHON SOURCE LINES 372-376

.. code-block:: default

    fileNameSampleParam = 'sampleParamFromMankamo_{}.csv'.format(Nbootstrap)
    fileNameSampleKmax = 'sampleKmaxFromMankamo_{}_{}.csv'.format(Nbootstrap, nameSeuil)
    gKmax = myECLM.computeAnalyseKMaxSample(p, fileNameSampleParam, fileNameSampleKmax)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Intervalle de confiance de niveau 90%: [ 5.0 ,  5.0 ]




.. GENERATED FROM PYTHON SOURCE LINES 377-380

.. code-block:: default

    gKmax.setGrid(False)
    view = View(gKmax)
    view.show()



.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_018.png
   :alt: Loi de $K_{max} = \arg \max \{k | PTS(k|$7$) \geq $1.0e-05$\}$
   :srcset: /auto_example/images/sphx_glr_plot_eclm_018.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  19.058 seconds)


.. _sphx_glr_download_auto_example_plot_eclm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_eclm.py <plot_eclm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_eclm.ipynb <plot_eclm.ipynb>`
