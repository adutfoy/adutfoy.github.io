
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_eclm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_plot_eclm.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_eclm.py:


========================================
Example : Extended Common Load Modelling
========================================

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Import the required modules

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: default

    import openturns as ot
    from openturns.viewer import View
    import oteclm








.. GENERATED FROM PYTHON SOURCE LINES 15-26

===========
Description
===========

We consider a common cause failure (CCF) groupe with *n=7* identical and independent components. The total impact vector of this CCF group is estimated after N=1002100 demands or tests on the group.

.. math::

    V_t^{n,N} = [1000000, 2000, 200, 30, 20, 5, 0, 0]



.. GENERATED FROM PYTHON SOURCE LINES 28-39

.. code-block:: default

    n = 7
    vectImpactTotal = ot.Indices(n+1)
    vectImpactTotal[0] = 1000000
    vectImpactTotal[1] = 2000
    vectImpactTotal[2] = 200
    vectImpactTotal[3] = 30
    vectImpactTotal[4] = 20
    vectImpactTotal[5] = 5
    vectImpactTotal[6] = 0
    vectImpactTotal[7] = 0








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Create the ECLM class. We will use the Gauss Legendre quadrature algorithm to compute all the integrals of the ECLM model. The use of 50 points is sufficicient to reach a good precision.

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    myECLM = oteclm.ECLM(vectImpactTotal, ot.GaussLegendre([50]))








.. GENERATED FROM PYTHON SOURCE LINES 46-54

==============================
Estimate the optimal parameter
==============================

We use the Mankamo assumption. We use the maximum likelihood estimators of the *Mankamo parameter*. We want to get all the graphs of the likelihood function at the optimal Mankamo parameter.

We start by verifying that our starting point :math:`(P_x, C_{co}, c_x)` for the optimization algorithm verifies the constraints!


.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    startingPoint = [5.0e-3, 0.51, 0.85]
    print(myECLM.verifyMankamoConstraints(startingPoint))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    False




.. GENERATED FROM PYTHON SOURCE LINES 60-61

If the point is not valid, we can ask for a valid one by giving $C_x$.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: default


    startingPoint = myECLM.computeValidMankamoStartingPoint(0.7)
    startingPoint






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <p>[0.00018494,0.35,0.7]</p>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 66-67

Anyway, if the starting point is not valid, the function *estimateMaxLikelihoodFromMankamo* will automatically change it by itself.

.. GENERATED FROM PYTHON SOURCE LINES 69-75

.. code-block:: default

    visuLikelihood = True
    mankamoParam, generalParam, finalLogLikValue, graphesCol = myECLM.estimateMaxLikelihoodFromMankamo(startingPoint, visuLikelihood, verbose=False)
    print('Mankamo parameter : ', mankamoParam)
    print('general parameter : ', generalParam)
    print('finalLogLikValue : ', finalLogLikValue)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Production of graphs
    graph (Cco, Cx) = (Cco_optim, Cx_optim)
    graph (logPx, Cx) = (logPx_optim, Cx_optim)
    graph (logPx, Cco) = (logPx_optim, Cco_optim)
    graph Cx = Cx_optim
    graph Cco = Cco_optim
    graph logPx = logPx_optim
    Mankamo parameter :  [0.00036988020585009376, 0.0001280116643614057, 0.02528571055593819, 0.02528571155593819]
    general parameter :  [0.9992086009709119, 0.04557091943008024, 0.045570920354576785, 0.28293643442456934, 0.7170635655754307]
    finalLogLikValue :  -21687.943415323116




.. GENERATED FROM PYTHON SOURCE LINES 76-82

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for i in range(6):
        gl.setGraph(i//3, i%3, graphesCol[i])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_001.png
   :alt: , Log likelihood at $(\log P_{x}, C_{co}) = $-8.96E+00,2.53E-02, Log likelihood at $(\log P_{x}, C_{x}) = $-8.96E+00,2.53E-02, Log likelihood at $(C_{co}, C_{x}) = $2.53E-02,2.53E-02, Log likelihood at $C_{x} = $2.53E-02, Log likelihood at $C_{co} = $2.53E-02, Log likelihood at $\log P_{x} = $-8.96E+00
   :srcset: /auto_example/images/sphx_glr_plot_eclm_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /usr/share/miniconda3/envs/test/lib/python3.11/site-packages/openturns/viewer.py:517: UserWarning: No contour levels were found within the data range.
      contourset = self._ax[0].contour(X, Y, Z, **contour_kw)




.. GENERATED FROM PYTHON SOURCE LINES 83-86

==============================
Compute the ECLM probabilities
==============================

.. GENERATED FROM PYTHON SOURCE LINES 88-103

.. code-block:: default

    PEG_list = myECLM.computePEGall()
    print('PEG_list = ', PEG_list)
    print('')

    PSG_list = myECLM.computePSGall()
    print('PSG_list = ', PSG_list)
    print('')

    PES_list = myECLM.computePESall()
    print('PES_list = ', PES_list)
    print('')

    PTS_list = myECLM.computePTSall()
    print('PTS_list = ', PTS_list)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PEG_list =  [0.9977584847961818, 0.0002841541677243373, 8.363577257330594e-06, 1.7370196759319893e-06, 3.941039968682787e-07, 9.648981778714597e-08, 2.544036317933804e-08, 7.210059411832193e-09]

    PSG_list =  [0.9999999999999788, 0.00036988020585008833, 2.2089025658853316e-05, 4.001346082257164e-06, 7.671045991795632e-07, 1.5458060355765427e-07, 3.2650422591170234e-08, 7.210059411832193e-09]

    PES_list =  [0.9977584847961818, 0.001989079174070361, 0.00017563512240394247, 6.079568865761962e-05, 1.3793639890389755e-05, 2.0262861735300653e-06, 1.7808254225536627e-07, 7.210059411832193e-09]

    PTS_list =  [0.9999999999999792, 0.00224151520379751, 0.00025243602972714905, 7.680090732320662e-05, 1.6005218665587017e-05, 2.2115787751972637e-06, 1.8529260166719845e-07, 7.210059411832193e-09]




.. GENERATED FROM PYTHON SOURCE LINES 104-114

================================================
Generate a sample of the parameters by Bootstrap
================================================

We use the bootstrap sampling to get a sample of total impact vectors. Each total impact vector value is associated to an optimal Mankamo parameter and an optimal general parameter.
We fix the size of the bootstrap sample.
We also fix the number of realisations after which the sample is saved.
Each optimisation problem is initalised with the optimal parameter found for the total impact vector.

The sample is generated and saved in a csv file.

.. GENERATED FROM PYTHON SOURCE LINES 116-119

.. code-block:: default

    Nbootstrap = 100
    blockSize = 256








.. GENERATED FROM PYTHON SOURCE LINES 120-126

.. code-block:: default

    startingPoint = mankamoParam[1:4]
    fileNameSampleParam = 'sampleParamFromMankamo_{}.csv'.format(Nbootstrap)
    myECLM.estimateBootstrapParamSampleFromMankamo(Nbootstrap, startingPoint, blockSize, fileNameSampleParam)

    # Create the sample of all the ECLM probabilities associated to the sample of the parameters.








.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default

    fileNameECLMProbabilities = 'sampleECLMProbabilitiesFromMankamo_{}.csv'.format(Nbootstrap)
    myECLM.computeECLMProbabilitiesFromMankano(blockSize, fileNameSampleParam, fileNameECLMProbabilities)








.. GENERATED FROM PYTHON SOURCE LINES 131-136

======================================================
Graphically analyse the bootstrap sample of parameters
======================================================

We create the Pairs graphs of the Mankamo and general parameters.

.. GENERATED FROM PYTHON SOURCE LINES 138-140

.. code-block:: default

    graphPairsMankamoParam, graphPairsGeneralParam, graphMarg_list, descParam = myECLM.analyseGraphsECLMParam(fileNameSampleParam)








.. GENERATED FROM PYTHON SOURCE LINES 141-144

.. code-block:: default

    view = View(graphPairsMankamoParam)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_002.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-150

.. code-block:: default

    view = View(graphPairsGeneralParam)
    view.show()

    # We estimate the distribution of each parameter with a Histogram and a normal kernel smoothing.




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_003.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 151-157

.. code-block:: default

    gl = ot.GridLayout(3,3)
    for k in range(len(graphMarg_list)):
        gl.setGraph(k//3, k%3, graphMarg_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_004.png
   :alt: , Pt PDF, Px PDF, Cco PDF, Cx PDF, pi PDF, db PDF, dx PDF, dR PDF, yxm PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-163

==================================================================
Graphically analyse the bootstrap sample of the ECLM probabilities
==================================================================

We create the Pairs graphs of all the ECLM probabilities. We limit the graphical study to the multiplicities lesser than :math:`k_{max}`.

.. GENERATED FROM PYTHON SOURCE LINES 165-169

.. code-block:: default

    kMax = 5

    graphPairs_list, graphPEG_PES_PTS_list, graphMargPEG_list, graphMargPSG_list, graphMargPES_list, graphMargPTS_list, desc_list = myECLM.analyseGraphsECLMProbabilities(fileNameECLMProbabilities, kMax)








.. GENERATED FROM PYTHON SOURCE LINES 170-177

.. code-block:: default

    descPairs = desc_list[0]
    descPEG_PES_PTS = desc_list[1]
    descMargPEG = desc_list[2]
    descMargPSG = desc_list[3]
    descMargPES = desc_list[4]
    descMargPTS = desc_list[5]








.. GENERATED FROM PYTHON SOURCE LINES 178-181

.. code-block:: default

    view = View(graphPairs_list[0])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_005.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 182-185

.. code-block:: default

    view = View(graphPairs_list[1])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_006.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 186-189

.. code-block:: default

    view = View(graphPairs_list[2])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_007.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 190-193

.. code-block:: default

    view = View(graphPairs_list[3])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_008.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 194-195

Fix a k <=kMax

.. GENERATED FROM PYTHON SOURCE LINES 195-200

.. code-block:: default


    k = 0
    view = View(graphPEG_PES_PTS_list[k])
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_009.png
   :alt: plot eclm
   :srcset: /auto_example/images/sphx_glr_plot_eclm_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 201-208

.. code-block:: default

    len(graphMargPEG_list)
    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPEG_list)):
        gl.setGraph(k//3, k%3, graphMargPEG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_010.png
   :alt: , PEG(0|7) PDF, PEG(1|7) PDF, PEG(2|7) PDF, PEG(3|7) PDF, PEG(4|7) PDF, PEG(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 209-215

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPSG_list)):
        gl.setGraph(k//3, k%3, graphMargPSG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_011.png
   :alt: , PSG(0) PDF, PSG(1) PDF, PSG(2) PDF, PSG(3) PDF, PSG(4) PDF, PSG(5) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 216-222

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPES_list)):
        gl.setGraph(k//3, k%3, graphMargPES_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_012.png
   :alt: , PES(0|7) PDF, PES(1|7) PDF, PES(2|7) PDF, PES(3|7) PDF, PES(4|7) PDF, PES(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 223-229

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPTS_list)):
        gl.setGraph(k//3, k%3, graphMargPTS_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_013.png
   :alt: , PTS(0|7) PDF, PTS(1|7) PDF, PTS(2|7) PDF, PTS(3|7) PDF, PTS(4|7) PDF, PTS(5|7) PDF
   :srcset: /auto_example/images/sphx_glr_plot_eclm_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 230-236

============================================
Fit a distribution to the ECLM probabilities
============================================

We fit a distribution among a given list to each ECLM probability. We test it with the Lilliefors test. 
We also compute the confidence interval of the specified level.

.. GENERATED FROM PYTHON SOURCE LINES 238-246

.. code-block:: default

    factoryColl = [ot.BetaFactory(), ot.LogNormalFactory(), ot.GammaFactory()]
    confidenceLevel = 0.9
    IC_list, graphMarg_list, descMarg_list = myECLM.analyseDistECLMProbabilities(fileNameECLMProbabilities, kMax, confidenceLevel, factoryColl)

    IC_PEG_list, IC_PSG_list, IC_PES_list, IC_PTS_list = IC_list
    graphMargPEG_list, graphMargPSG_list, graphMargPES_list, graphMargPTS_list = graphMarg_list
    descMargPEG, descMargPSG, descMargPES, descMargPTS = descMarg_list





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Test de Lilliefors
    ==================

    Ordre k= 0
    Best model PEG( 0 |n) :  Gamma(k = 40807, lambda = 4.11906e+06, gamma = 0.987842) p-value =  0.7169902912621359
    Best model PSG( 0 |n) :  LogNormal(muLog = -26.1553, sigmaLog = 8.89975e-05, gamma = 1) p-value =  0.04095904095904096
    Best model PES( 0 |n) :  Gamma(k = 40807, lambda = 4.11906e+06, gamma = 0.987842) p-value =  0.709186101856259
    Best model PTS( 0 |n) :  LogNormal(muLog = -26.6129, sigmaLog = 0.000148879, gamma = 1) p-value =  0.3040604343720491

    Test de Lilliefors
    ==================

    Ordre k= 1
    Best model PEG( 1 |n) :  LogNormal(muLog = -9.19699, sigmaLog = 0.0669016, gamma = 0.000184342) p-value =  0.40489017820140905
    Best model PSG( 1 |n) :  Beta(alpha = 2.0922, beta = 2.36032, a = 0.000351093, b = 0.000392658) p-value =  0.6414359861591695
    Best model PES( 1 |n) :  Beta(alpha = 2.36507, beta = 2.90073, a = 0.00189327, b = 0.00213401) p-value =  0.4499192245557351
    Best model PTS( 1 |n) :  LogNormal(muLog = -6.07755, sigmaLog = 0.0212681, gamma = -4.35887e-05) p-value =  0.5795734208367515

    Test de Lilliefors
    ==================

    Ordre k= 2
    Best model PEG( 2 |n) :  LogNormal(muLog = -12.1143, sigmaLog = 0.0954646, gamma = 2.75555e-06) p-value =  0.5424889246878775
    Best model PSG( 2 |n) :  LogNormal(muLog = 0.844332, sigmaLog = 9.05054e-07, gamma = -2.3264) p-value =  0.10430980637101811
    Best model PES( 2 |n) :  LogNormal(muLog = -9.06982, sigmaLog = 0.0954646, gamma = 5.78665e-05) p-value =  0.5531742822482815
    Best model PTS( 2 |n) :  LogNormal(muLog = -8.35387, sigmaLog = 0.0690542, gamma = 1.32684e-05) p-value =  0.17801374141161774

    Test de Lilliefors
    ==================

    Ordre k= 3
    Best model PEG( 3 |n) :  LogNormal(muLog = -6.07117, sigmaLog = 6.48892e-05, gamma = -0.00230676) p-value =  0.1340734415029889
    Best model PSG( 3 |n) :  Beta(alpha = 1.20877, beta = 1.77767, a = 2.77205e-06, b = 5.79554e-06) p-value =  0.003996003996003996
    Best model PES( 3 |n) :  LogNormal(muLog = -1.70914, sigmaLog = 2.89626e-05, gamma = -0.180961) p-value =  0.10989010989010989
    Best model PTS( 3 |n) :  Beta(alpha = 1.46728, beta = 1.42126, a = 5.86288e-05, b = 9.25024e-05) p-value =  0.10589410589410589

    Test de Lilliefors
    ==================

    Ordre k= 4
    Best model PEG( 4 |n) :  Beta(alpha = 1.1208, beta = 1.57229, a = 2.63157e-07, b = 5.70431e-07) p-value =  0.001998001998001998
    Best model PSG( 4 |n) :  Beta(alpha = 0.958575, beta = 2.08678, a = 4.42352e-07, b = 1.53262e-06) p-value =  0.023976023976023976
    Best model PES( 4 |n) :  Beta(alpha = 1.1208, beta = 1.57229, a = 9.2105e-06, b = 1.99651e-05) p-value =  0.001998001998001998
    Best model PTS( 4 |n) :  Beta(alpha = 1.0647, beta = 1.66919, a = 1.03286e-05, b = 2.48565e-05) p-value =  0.005994005994005994

    Test de Lilliefors
    ==================

    Ordre k= 5
    Best model PEG( 5 |n) :  Beta(alpha = 0.89003, beta = 1.99864, a = 4.96753e-08, b = 2.1129e-07) p-value =  0.00999000999000999
    Best model PSG( 5 |n) :  Beta(alpha = 0.81495, beta = 2.37197, a = 6.86841e-08, b = 4.52224e-07) p-value =  0.0899100899100899
    Best model PES( 5 |n) :  Beta(alpha = 0.89003, beta = 1.99864, a = 1.04318e-06, b = 4.43709e-06) p-value =  0.013986013986013986
    Best model PTS( 5 |n) :  Beta(alpha = 0.87676, beta = 2.09542, a = 1.10635e-06, b = 5.15319e-06) p-value =  0.02197802197802198





.. GENERATED FROM PYTHON SOURCE LINES 247-261

.. code-block:: default

    for k in range(len(IC_PEG_list)):
        print('IC_PEG_', k, ' = ', IC_PEG_list[k])

    for k in range(len(IC_PSG_list)):
        print('IC_PSG_', k, ' = ', IC_PSG_list[k])

    for k in range(len(IC_PES_list)):
        print('IC_PES_', k, ' = ', IC_PES_list[k])

    for k in range(len(IC_PTS_list)):
        print('IC_PTS_', k, ' = ', IC_PTS_list[k])

    # We draw all the estimated distributions and the title gives the best model.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    IC_PEG_ 0  =  [0.997663, 0.997837]
    IC_PEG_ 1  =  [0.000273766, 0.00029854]
    IC_PEG_ 2  =  [7.33267e-06, 9.23229e-06]
    IC_PEG_ 3  =  [1.4431e-06, 1.97449e-06]
    IC_PEG_ 4  =  [2.73104e-07, 5.20605e-07]
    IC_PEG_ 5  =  [4.96831e-08, 1.66477e-07]
    IC_PSG_ 0  =  [1, 1]
    IC_PSG_ 1  =  [0.000354533, 0.000386447]
    IC_PSG_ 2  =  [1.81642e-05, 2.55944e-05]
    IC_PSG_ 3  =  [2.89058e-06, 5.24494e-06]
    IC_PSG_ 4  =  [4.4873e-07, 1.23007e-06]
    IC_PSG_ 5  =  [6.72336e-08, 3.16212e-07]
    IC_PES_ 0  =  [0.997663, 0.997837]
    IC_PES_ 1  =  [0.00191636, 0.00208978]
    IC_PES_ 2  =  [0.000153988, 0.000193877]
    IC_PES_ 3  =  [5.05064e-05, 6.9109e-05]
    IC_PES_ 4  =  [9.55933e-06, 1.82207e-05]
    IC_PES_ 5  =  [1.03993e-06, 3.49707e-06]
    IC_PTS_ 0  =  [1, 1]
    IC_PTS_ 1  =  [0.00216287, 0.0023369]
    IC_PTS_ 2  =  [0.000220634, 0.000280273]
    IC_PTS_ 3  =  [6.14365e-05, 9.02954e-05]
    IC_PTS_ 4  =  [1.06666e-05, 2.2149e-05]
    IC_PTS_ 5  =  [1.0999e-06, 3.95515e-06]




.. GENERATED FROM PYTHON SOURCE LINES 262-268

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPEG_list)):
        gl.setGraph(k//3, k%3, graphMargPEG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_014.png
   :alt: , PEG(0|7) - best model : Gamma, PEG(1|7) - best model : LogNormal, PEG(2|7) - best model : LogNormal, PEG(3|7) - best model : LogNormal, PEG(4|7) - best model : Beta, PEG(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 269-275

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPSG_list)):
        gl.setGraph(k//3, k%3, graphMargPSG_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_015.png
   :alt: , PSG(0|7) - best model : LogNormal, PSG(1|7) - best model : Beta, PSG(2|7) - best model : LogNormal, PSG(3|7) - best model : Beta, PSG(4|7) - best model : Beta, PSG(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_015.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 276-282

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPES_list)):
            gl.setGraph(k//3, k%3, graphMargPES_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_016.png
   :alt: , PES(0|7) - best model : Gamma, PES(1|7) - best model : Beta, PES(2|7) - best model : LogNormal, PES(3|7) - best model : LogNormal, PES(4|7) - best model : Beta, PES(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_016.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 283-289

.. code-block:: default

    gl = ot.GridLayout(2,3)
    for k in range(len(graphMargPTS_list)):
        gl.setGraph(k//3, k%3, graphMargPTS_list[k])
    view = View(gl)
    view.show()




.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_017.png
   :alt: , PTS(0|7) - best model : LogNormal, PTS(1|7) - best model : LogNormal, PTS(2|7) - best model : LogNormal, PTS(3|7) - best model : Beta, PTS(4|7) - best model : Beta, PTS(5|7) - best model : Beta
   :srcset: /auto_example/images/sphx_glr_plot_eclm_017.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 290-300

====================================================================================
Analyse the minimal multiplicity which probability is greater than a given threshold
====================================================================================

We fix *p* and we get the minimal multiplicity :math:`k_{max}` such that :

.. math::

   k_{max} = \arg\max \{k| \mbox{PTS}(k|n) \geq p \}


.. GENERATED FROM PYTHON SOURCE LINES 302-305

.. code-block:: default

    p = 1.0e-5
    nameSeuil = '10M5'








.. GENERATED FROM PYTHON SOURCE LINES 306-311

.. code-block:: default

    kMax = myECLM.computeKMaxPTS(p)
    print('kMax = ', kMax)

    # Then we use the bootstrap sample of the Mankamo parameters to generate a sample of :math:`k_{max}`. We analyse the distribution of $k_{max}$: we estimate it with the empirical distribution and we derive a confidence interval of order :math:`90\%`.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    kMax =  4




.. GENERATED FROM PYTHON SOURCE LINES 312-316

.. code-block:: default

    fileNameSampleParam = 'sampleParamFromMankamo_{}.csv'.format(Nbootstrap)
    fileNameSampleKmax = 'sampleKmaxFromMankamo_{}_{}.csv'.format(Nbootstrap, nameSeuil)
    gKmax = myECLM.computeAnalyseKMaxSample(p, blockSize, fileNameSampleParam, fileNameSampleKmax)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Intervalle de confiance de niveau 90%: [ 4.0 ,  4.0 ]




.. GENERATED FROM PYTHON SOURCE LINES 317-319

.. code-block:: default

    view = View(gKmax)
    view.show()



.. image-sg:: /auto_example/images/sphx_glr_plot_eclm_018.png
   :alt: Loi de $K_{max} = \arg \max \{k | PTS(k|$7$) \geq $1.0e-05$\}$
   :srcset: /auto_example/images/sphx_glr_plot_eclm_018.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.959 seconds)


.. _sphx_glr_download_auto_example_plot_eclm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_eclm.py <plot_eclm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_eclm.ipynb <plot_eclm.ipynb>`
